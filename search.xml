<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github项目入门（一）</title>
    <url>/2020/07/13/Future/</url>
    <content><![CDATA[<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>在学习各种语言的时候，尤其是在校学习<code>C\C++</code>的时候，很难理解学习这种在黑框框里运行的程序语言到底是用来干什么的，除了入门书籍上所给出的案例，找不到可以使用这些语言做什么，于是便想在<code>github</code>上找一些开源的入门项目来练手。</p>
]]></content>
  </entry>
  <entry>
    <title>LeetCode 343.题整数分割题解</title>
    <url>/2020/07/30/leetcode-343/</url>
    <content><![CDATA[<h3 id><a href="#" class="headerlink" title=" "></a> </h3><a id="more"></a>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p><a href="https://leetcode-cn.com/problems/integer-break/" target="_blank" rel="noopener">题目传送门</a></p>
<h3 id="一、相关知识："><a href="#一、相关知识：" class="headerlink" title="一、相关知识："></a>一、相关知识：</h3><p>在高中的时候都学到过，N个数和一定时，其积有最大值，当且仅当这N个数相等时取得最大。</p>
<p>只有两个数时公式为：</p>
<script type="math/tex; mode=display">
a^2 + b^2 \ge2ab \left(当且仅当a=b时等号成立\right)</script><p>多个数时的公式：</p>
<script type="math/tex; mode=display">
\frac{_1+a_2+a_3+a_4+a_5+a_6+···+a_n}{n}\ge\sqrt[n]{a_1a_2a_3a_4a_5···a_n}
\\\left(当且仅当a_1=a_2=a_3=···=a_n时等号成立\right)</script><h3 id="二、分析：-文中NumGiven为所给的整数"><a href="#二、分析：-文中NumGiven为所给的整数" class="headerlink" title="二、分析：(文中NumGiven为所给的整数)"></a>二、分析：(文中NumGiven为所给的整数)</h3><p>根据这两个公式我们可以有一个大致的方向：尽量将正整数分为$m-1$个大小大相同且为$n$的正整数，和另外一个正整数，其中$ m=2、3、4···$</p>
<p>我们首先以整数 10 为例，10 可以被分为</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">拆分成的数集</th>
<th style="text-align:center">乘积</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$2\ 2\ 2\ 2\ 2$</td>
<td style="text-align:center">$2\times2\times2\times2\times2$</td>
</tr>
<tr>
<td style="text-align:center">$3\ 3\ 3 \ 1$</td>
<td style="text-align:center">$3\times3\times\left(3+1\right)$</td>
</tr>
<tr>
<td style="text-align:center">$4 \ 4\ 2$</td>
<td style="text-align:center">$4\times4\times2$</td>
</tr>
<tr>
<td style="text-align:center">$5\ 5$</td>
<td style="text-align:center">$5\times5$</td>
</tr>
</tbody>
</table>
</div>
<p>从上述表中我们可以看出，拆分出的相等的元素的个数为<code>NumGiven/n</code>，另外一个正整数为<code>NumGiven%n</code></p>
<p>表中第二行为$3\times3\times\left(3+1\right)$是因为当余数为 1 时，拆分所得的$m-1$个值为$n$的正整数相乘再乘 1 的值远没有$m-2$个值为$n$的正整数相乘再与$n+1$相乘所得的结果大。(一个正整数共拆分为m个正整数)</p>
<p>当余数不为 1 时，拆分所得的$m-1$个值为$n$的正整数相乘再乘余数的值远比$m-2$个值为$n$的正整数相乘再与$n+余数$相乘所得的结果大</p>
<p>推导如下：(令余数为r)</p>
<script type="math/tex; mode=display">
\frac{n^{m-1}\cdot r}{n^{m-2}\cdot{\left(n+r\right)}}=\frac{nr}{n+r}=\frac{r}{1+\frac{r}{n}}
\\因为\frac{r}{n}<1且由上述假设r\ge2所以可得
\\\frac{n^{m-1}\cdot r}{n^{m-2}\cdot{\left(n+r\right)}}>1</script><p>到这，我们可以大概得出解题的流程：</p>
<ol>
<li><p>求出<code>NumGiven/n</code>以及<code>NumGiven%n</code>的值。</p>
</li>
<li><p>如果<code>NumGiven%n == 0</code>则当前最大值为<code>Pow(n,NumGiven/n-1)</code>，并且跳转至4，反之则跳转至3。</p>
</li>
<li><p>如果<code>NumGiven%n == 1</code>则当前最大值为<code>Pow(n,NumGiven/n-1)*(n+1)</code>，反之当前最大值为<code>Pow(n,NumGiven/n)*(NumGiven%n)</code>。</p>
</li>
<li><p>比较当前最大值与前一个最大值的大小，更新数据，变动n的值。</p>
</li>
<li><p>判断n是否大于<code>NumGiven</code>，若果是则跳转到5，反之跳转到1。</p>
</li>
<li><p>退出循环，输出最大值。</p>
</li>
</ol>
<p>算法时间复杂度为$O(n)$，空间复杂度为$O(1)$</p>
<p>按照上述算法编写代码会出现当输入的整数位2，3时输出错误的现象，至于为什么会出现错误读者可带入算法进性检验。下面提供两种解决方案：</p>
<ol>
<li>在算法最开始的时候判断输入的整数是否大于3，如果是则调用算法，反之则直接输出<code>NumGiven-1</code></li>
<li>在程序中增加判断语言，对可能出现的错误现象进行修正，笔者采用的就是第二种方法。</li>
</ol>
<p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span>=<span class="number">-1</span>;				<span class="comment">//设定初始的最大值位-1，便于对最大值进行覆盖填写</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> temp_max=<span class="number">1</span>;			<span class="comment">//存放当前最大值的变量	</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)	<span class="comment">//从2开始遍历直到n-1</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> num=n/i;		<span class="comment">//计算出该整数包含多少个n</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        temp_max=<span class="built_in">pow</span>(i,num);<span class="comment">//按照分析的算法步骤先处理m-1个值为n的正整数，再对余数进行处理。</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n%i!=<span class="number">0</span>)			<span class="comment">//余数为0时，应直接返回数值，不能再乘余数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">1</span>&amp;&amp;num!=<span class="number">1</span>)	<span class="comment">//该步骤用于处理的正整数为3的特殊情况。</span></span><br><span class="line">            temp_max=(temp_max/i)*(i+n%i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            temp_max*=n%i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">max</span> = <span class="built_in">max</span>&gt;temp_max?<span class="built_in">max</span>:temp_max;</span><br><span class="line">        temp_max=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max</span>==<span class="number">-1</span>)			<span class="comment">//该步骤用于处理输入的正整数位2的特殊情况</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><h3 id="一、分析："><a href="#一、分析：" class="headerlink" title="一、分析："></a>一、分析：</h3><p>通过解法一我们可以求出乘积的最大值，也可以求出当n值位多少时输出最大，再计算完58个实例之后发现，乘积的最大值总是在$n=3$处取得。下面对为什么总是再$n=3$处取得进行粗略的分析。</p>
<p>由解法一的分析我们可知，只有当被分成所有整数都相等时才能取得乘积最大，又因为要分成正整数。实现不了完全相等，这里我们先假设只需求得被分成所有数的乘积最大。于是可以列出下面的式子：</p>
<script type="math/tex; mode=display">
Max \ \ \ =\ \ \ max\{x^\frac{n}{x}\}</script><p>式子中的x为均等分之后的值。使用Maltlab画出图像有：</p>
<p><img src="/2020/07/30/leetcode-343/343.png" alt="555"></p>
<p>该图像时从1到58对其进行均等分割并且相乘得到的图像，由图像可以粗略的看出当满足正整数条件的时候，x=3时乘积值最大，故由此可优化解法一，我们无需遍历，可直接默认分割得到的整数大部分都为3，即n=3。因此我们可以优化时间复杂度至$O(1)$。代码与方法一大致相同，留做读者思考。</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
</search>
